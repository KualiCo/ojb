package org.apache.ojb.odmg;/* Copyright 2002-2005 The Apache Software Foundation * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import java.io.Serializable;/** * * TransactionAware is an interface that can be implemented * to provide hooks into the Transaction interface provided * by ObJectRelationalBridge. * Only objects which have a write lock acquired on them can * participate in a transaction. * To kill a transaction, implement beforeCommit() and throw * a TransactionAbortedException.  This will force the entire * transaction to rollback. * * To rebuild an object after a rollback use the afterAbort() * call.  This is a good place to populate transient or other * variables. * * beforeAbort and afterCommit are there for informational * purposes. * * Here are some common ways you can expect this interface * to be called: * * Sucessful commit: * beforeCommit() * afterCommit() * * Transaction Failure (1): * beforeCommit() * beforeAbort() * afterAbort() * * Transaction Failure (2): * beforeAbort() * afterAbort() * * Commits and Aborts aren't directly provided to TransactionAware classes. * The idea is that Transactions are difficult to handle, and most of it * will be handled by ObjectSnapshot.  However, you use TransactionAware * to do one of two things, kill a transaction from happening, and clean * up after a rollback. * * @version $Id: TransactionAware.java,v 1.1 2007-08-24 22:17:37 ewestfal Exp $ */public interface TransactionAware extends Serializable{	static final long serialVersionUID = 3690863289834166023L;    /**     *     * beforeCommit will give an object a chance to kill a     * transaction before it is committed.     * To kill a transaction, throw a new TransactionAbortedException.     *     */    public void beforeCommit() throws org.odmg.TransactionAbortedException;    /**     *     * afterCommit is called only after a successful commit has taken     * place.     *     */    public void afterCommit();    /**     *     * beforeAbort is called before a transaction is aborted.     *     */    public void beforeAbort();    /**     *     * afterAbort will be called after a transaction has been aborted.     * The values of fields which get persisted will have changed to     * what they were at the begining of the transaction.  This method     * should be overridden to reset any transient or non-persistent     * fields.     *     */    public void afterAbort();}
