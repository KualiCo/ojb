package org.apache.ojb.broker.util.logging;/* Copyright 2002-2005 The Apache Software Foundation * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */import org.apache.ojb.broker.util.configuration.Configurable;import org.apache.ojb.broker.util.configuration.Configuration;import org.apache.ojb.broker.util.configuration.ConfigurationException;import java.io.Serializable;/** * this interface defines the behaviour of a logging mechanism. * This API corresponds closely to the LOG4J Category Api. * By using this interface OJB remains free from Logger-Implementation * specific code. */public interface Logger extends Serializable, Configurable{	static final long serialVersionUID = 1177329037874407180L;    /*     * OJB loglevel constants. they corespond directly to LOG4J LogLevels.     */    public final static int DEBUG = 1;    public final static int INFO = 2;    public final static int WARN = 3;    public final static int ERROR = 4;    public final static int FATAL = 5;    /**     * generate a message for loglevel DEBUG     * @param pObject the message Object     */    public void debug(Object pObject);    /**     * generate a message for loglevel INFO     * @param pObject the message Object     */    public void info(Object pObject);    /**     * generate a message for loglevel WARN     * @param pObject the message Object     */    public void warn(Object pObject);    /**     * generate a message for loglevel ERROR     * @param pObject the message Object     */    public void error(Object pObject);    /**     * generate a message for loglevel FATAL     * @param pObject the message Object     */    public void fatal(Object pObject);    public void debug(Object message, Throwable obj);    public void info(Object message, Throwable obj);    public void warn(Object message, Throwable obj);    public void error(Object message, Throwable obj);    public void fatal(Object message, Throwable obj);    public boolean isEnabledFor(int priority);    public boolean isDebugEnabled();    /**     * returns the name of the logger isntance     */    public String getName();    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : DEBUG     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeDebug(String message, Object obj);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : DEBUG     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeDebug(String message, Object obj, Throwable t);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : INFO     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeInfo(String message, Object obj);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : INFO     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeInfo(String message, Object obj, Throwable t);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : WARN     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeWarn(String message, Object obj);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : WARN     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeWarn(String message, Object obj, Throwable t);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : ERROR     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeError(String message, Object obj);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : ERROR     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeError(String message, Object obj, Throwable t);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : FATAL     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeFatal(String message, Object obj);    /**     * Exception safe log method.     * This method can be used to prevent any exception thrown by obj.toString() implementations.     * Log level used : FATAL     * @deprecated The normal logging methods should always be safe with regard to exceptions     *             that are thrown while accessing the arguments.      */    public void safeFatal(String message, Object obj, Throwable t);    /**     * Configure this logging. Note that the config object will be an instance     * of {@link LoggingConfiguration}.     *      * @param config The {@link LoggingConfiguration} object     * @throws ConfigurationException     */    void configure(Configuration config) throws ConfigurationException;}
