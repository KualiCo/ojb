package org.apache.ojb.tools.mapping.reversedb.gui;

/* Copyright 2002-2005 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.ojb.tools.mapping.reversedb.gui.actions.*;

/**
 *
 * @author <a href="mailto:bfl@florianbruckner.com">Florian Bruckner</a>
 * @version $Id: JFrmMainFrame.java,v 1.1 2007-08-24 22:17:32 ewestfal Exp $
 */
public class JFrmMainFrame extends javax.swing.JFrame
{
    public static final String JDBC_DRIVER = "JDBCDriver";
    public static final String JDBC_URL    = "JDBCURL";
    public static final String JDBC_USER   = "JDBCUsername";
    public static final String JDBC_PASSWORD = "JDBCPassword";
    
    private java.util.HashMap hmPropertySheets = new java.util.HashMap();
    
    org.apache.ojb.tools.mapping.reversedb.DBMeta aDBMeta;
    java.util.Properties schemeGeneratorProperties;
    java.sql.Connection aConnection = null;
    
    /** Creates new form JFrmMainFrame */
    public JFrmMainFrame(java.util.Properties theProperties)
    {
        schemeGeneratorProperties = theProperties;
        initComponents();
    }
    
    public void setConnection(java.sql.Connection conn)
    {
        firePropertyChange("JDBCConnection", aConnection, conn);
        aConnection = conn;
    }
    
    public String getProperty(String propertyName, String defaultValue)
    {
        return schemeGeneratorProperties.getProperty(propertyName, defaultValue);
    }
    
    public void setProperty(String propertyName, String value)
    {
        firePropertyChange(propertyName,
        schemeGeneratorProperties.getProperty(propertyName), value);
        schemeGeneratorProperties.setProperty(propertyName, value);
        try
        {
            schemeGeneratorProperties.store(new java.io.FileOutputStream(System.getProperty("user.home") +
            System.getProperty("file.separator") + "SchemeGenerator.properties"), "");
        }
        catch (java.io.FileNotFoundException ex)
        {
            ex.printStackTrace();
        }
        catch (java.io.IOException ioex)
        {
            ioex.printStackTrace();
        }
    }
    
    public org.apache.ojb.tools.mapping.reversedb.DBMeta getDBMeta()
    {
        return this.aDBMeta;
    }
    
    public void analyzeSchema()
    {
        try
        {
            String strCatalogPattern = javax.swing.JOptionPane.showInputDialog(this, "Enter regular expression to filter catalogs (leave blank to get all catalogs, all catalogs will match the expression)");
            String strSchemaPattern = javax.swing.JOptionPane.showInputDialog(this, "Enter regular expression to filter schemas (leave blank to get all schemas, all read schemas will match the expression)");
            
            aDBMeta = new org.apache.ojb.tools.mapping.reversedb.DBMeta(strCatalogPattern, strSchemaPattern, this.aConnection.getMetaData());
            aDBMeta.read();
            aDBMeta.generateReferences();
            aDBMeta.debug();
            this.jTree1.setModel(new javax.swing.tree.DefaultTreeModel(aDBMeta));
        }
        catch (java.sql.SQLException sqlEx)
        {
            java.sql.SQLException currentSqlEx = sqlEx;
            while (currentSqlEx != null)
            {
                System.out.println(sqlEx.getErrorCode() + ":" + sqlEx.getMessage());
                currentSqlEx = currentSqlEx.getNextException();
            }
            sqlEx.printStackTrace();
        }
        catch (Throwable t)
        {
            t.printStackTrace();
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        mnuFileConnect = new javax.swing.JMenuItem();
        mnuFileReadSchema = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("OJB Scheme Generator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jButton1.setAction(new DBConnPropertiesAction(this));
        jToolBar1.add(jButton1);

        jButton2.setText("Read");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jToolBar1.add(jButton2);

        jButton3.setText("Save XML");
        jButton3.setAction(new SaveXMLAction(this));
        jToolBar1.add(jButton3);

        jButton4.setAction(new GenerateJavaClassesAction(this));
        jToolBar1.add(jButton4);

        jButton5.setAction(new SetPackageAction(this));
        jToolBar1.add(jButton5);

        jButton6.setAction(new DisableClassesWithRegexAction(this));
        jToolBar1.add(jButton6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jToolBar1, gridBagConstraints);

        jSplitPane1.setDividerLocation(100);
        jTree1.setModel(null);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jScrollPane2.setViewportView(jPanel1);

        jSplitPane1.setRightComponent(jScrollPane2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        mnuFileConnect.setAction(new DBConnPropertiesAction(this));
        mnuFileConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileConnectActionPerformed(evt);
            }
        });

        fileMenu.add(mnuFileConnect);

        mnuFileReadSchema.setText("Read Schema");
        mnuFileReadSchema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFileReadSchemaActionPerformed(evt);
            }
        });

        fileMenu.add(mnuFileReadSchema);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        pack();
    }//GEN-END:initComponents
    
    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_jTree1ValueChanged
    {//GEN-HEADEREND:event_jTree1ValueChanged
        javax.swing.tree.TreePath tp = evt.getPath();
        if (tp != null)
        {
            Object o = tp.getLastPathComponent();
            if (o instanceof PropertySheetModel)
            {
                PropertySheetModel p = (PropertySheetModel) o;
                PropertySheetView pv =
                (PropertySheetView)hmPropertySheets.get(p.getPropertySheetClass());
                if (pv == null)
                {
                    try
                    {
                        pv = (PropertySheetView)p.getPropertySheetClass().newInstance();
                    }
                    catch (InstantiationException ie)
                    {
                        // What to do here?????
                        ie.printStackTrace();
                    }
                    catch (IllegalAccessException iae)
                    {
                        iae.printStackTrace();
                    }
                }
                pv.setModel(p);
                this.jScrollPane2.setViewportView((java.awt.Component)pv);
            }
        }
    }//GEN-LAST:event_jTree1ValueChanged
    
  private void jButton2ActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
  {//GEN-HEADEREND:event_jButton2ActionPerformed
      this.analyzeSchema();
  }//GEN-LAST:event_jButton2ActionPerformed
  
  private void mnuFileReadSchemaActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuFileReadSchemaActionPerformed
  {//GEN-HEADEREND:event_mnuFileReadSchemaActionPerformed
      this.analyzeSchema();
  }//GEN-LAST:event_mnuFileReadSchemaActionPerformed
  
  private void mnuFileConnectActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_mnuFileConnectActionPerformed
  {//GEN-HEADEREND:event_mnuFileConnectActionPerformed
      // Add your handling code here:
  }//GEN-LAST:event_mnuFileConnectActionPerformed
  
  private void fileMenuActionPerformed (java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileMenuActionPerformed
  {//GEN-HEADEREND:event_fileMenuActionPerformed
      // Add your handling code here:
  }//GEN-LAST:event_fileMenuActionPerformed
  
  private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)
  {//GEN-FIRST:event_exitMenuItemActionPerformed
      System.exit(0);
  }//GEN-LAST:event_exitMenuItemActionPerformed
  
  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt)
  {//GEN-FIRST:event_exitForm
      System.exit(0);
  }//GEN-LAST:event_exitForm
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
      // new JFrmMainFrame().show ();8
  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem mnuFileConnect;
    private javax.swing.JMenuItem mnuFileReadSchema;
    // End of variables declaration//GEN-END:variables
    
}

/***************************** Changelog *****************************
 * // $Log: not supported by cvs2svn $
 * // Revision 1.1.2.1  2005/12/21 22:32:02  tomdz
 * // Updated license
 * //
 * // Revision 1.1  2004/05/05 16:38:49  arminw
 * // fix fault
 * // wrong package structure used:
 * // org.apache.ojb.tools.reversdb
 * // org.apache.ojb.tools.reversdb2
 * //
 * // instead of
 * // org.apache.ojb.tools.mapping.reversdb
 * // org.apache.ojb.tools.mapping.reversdb2
 * //
 * // Revision 1.1  2004/05/04 13:44:59  arminw
 * // move reverseDB stuff
 * //
 * // Revision 1.9  2004/04/04 23:53:42  brianm
 * // Fixed initial copyright dates to match cvs repository
 * //
 * // Revision 1.8  2004/03/11 18:16:22  brianm
 * // ASL 2.0
 * //
 * // Revision 1.7  2003/06/21 10:15:50  florianbruckner
 * // start frame with a null treemodel (get rid of sample TreeModel on startup)
 * //
 * // Revision 1.6  2003/02/21 12:49:59  florianbruckner
 * // remove duplicate license from header
 * // Listen on the selection model for a changed selection instead of listening on mouse events
 * //
 * // Revision 1.5  2003/01/28 21:42:31  florianbruckner
 * // add dialog for entering a schema and catalog regex pattern
 * //
 * // Revision 1.4  2003/01/28 19:59:35  florianbruckner
 * // simple fix for error reporting
 * //
 * // Revision 1.3  2002/06/18 12:26:41  florianbruckner
 * // changes in Netbeans Form definitions after move to jakarta.
 * //
 * // Revision 1.2  2002/06/17 19:34:34  jvanzyl
 * // Correcting all the package references.
 * // PR:
 * // Obtained from:
 * // Submitted by:
 * // Reviewed by:
 * //
 * // Revision 1.1.1.1  2002/06/17 18:16:54  jvanzyl
 * // Initial OJB import
 * //
 * // Revision 1.3  2002/05/18 19:13:33  mattbaird
 * // Big Checkin includes:
 *
 * // - Fix for ODMG recursion bug, using registered for lock map.
 *
 * // - Do not create objects with no primary key that aren't using a key generator.
 *
 * // - Refactoring to allow OJB to use managed connections from an application server.
 *
 * // - addition of initial JCA implementation.
 *
 * // - addition of MBean code to integrate OJB into JBoss
 * //
 * // Revision 1.2  2002/05/16 11:47:09  florianbruckner
 * // fix CR/LF issue, change license to ASL
 * //
 * // Revision 1.1  2002/04/18 11:44:16  mpoeschl
 * //
 * // move files to new location
 * //
 * // Revision 1.5  2002/04/07 09:05:17  thma
 * // *** empty log message ***
 * //
 * // Revision 1.3  2002/03/11 18:40:26  florianbruckner
 * // modify .form files so the use the correct package name
 * //
 * // Revision 1.2  2002/03/11 17:36:26  florianbruckner
 * // fix line break issue for these files that were previously checked in with -kb
 * //
 * // Revision 1.1  2002/03/04 17:19:32  thma
 * // initial checking for Florians Reverse engineering tool
 * //
 * // Revision 1.1.1.1  2002/02/20 13:35:25  Administrator
 * // initial import
 * //
 * /***************************** Changelog *****************************/
