package org.apache.ojb.tools.mapping.reversedb2.propertyEditors;

/* Copyright 2002-2005 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This class contains all the basic functionality for a property editor. It extends
 * JPanel, so it could be added to a JScrollPane. The PropertyEditor always has
 * an associated PropertyEditorTarget that acts as the "model" for the PropertyEditor
 * 
 * To implement your PropertyEditor, you have to design a GUI with all the properties
 * you want the user to see. You have to register the necessary listeners to get notified
 * if a value is changed by the user in order to set the property in the model.
 *
 * Additionally you might want to register a PropertyChangeListener that gets notified
 * if a property is changed in the model (for example by a second window based on the 
 * same model).
 *
 * In your implementation you should override setEditorTarget() to check, whether you get a correct
 * object set as editorTarget and to retrieve the inital set of values from the editorTarget.
 *
 * If your Panel only contains components that implement PropertyEditorComponentInterface,
 * you do not have to setup any listeners, you just should check that you get the correct
 * object in setEditorTarget, everything else will be handled by this container. If you
 * group components withing Panels and add those panels to this container, these panels
 * have to implement PropertyEdtitorComponentInterface as well, the contained Components wouldn't
 * get notified of a editorTarget change otherwise.
 *
 * @author <a href="mailto:bfl@florianbruckner.com">Florian Bruckner</a> 
 * @version $Id: PropertyEditor.java,v 1.1 2007-08-24 22:17:28 ewestfal Exp $
 */

abstract public class PropertyEditor extends javax.swing.JPanel
{
    private PropertyEditorTarget   propertyTarget = null;
    private java.beans.PropertyChangeListener aPropertyChangeListener = null;
    
    /** Creates new form PropertyEditor */
    public PropertyEditor ()
    {
        initComponents ();
    }
    
    public void setEditorTarget(PropertyEditorTarget target)
    {
        if (propertyTarget != null && aPropertyChangeListener != null)
        {
            propertyTarget.removePropertyChangeListener(aPropertyChangeListener);
        }
        propertyTarget = target;
        if (propertyTarget != null && aPropertyChangeListener != null)
        {
            propertyTarget.addPropertyChangeListener(aPropertyChangeListener);            
        }
        
        java.awt.Component c[] = this.getComponents();
        for (int i = 0; i < c.length; i++)
        {
            if (c[i] instanceof PropertyEditorComponentInterface)
                ((PropertyEditorComponentInterface)c[i]).setEditorTarget(target);
        }
    }
    
    public PropertyEditorTarget getEditorTarget()
    {
        return propertyTarget;
    }
    
    public void setPropertyChangeListener(java.beans.PropertyChangeListener pListener)
    {
        if (propertyTarget != null && aPropertyChangeListener != null)
        {
            propertyTarget.removePropertyChangeListener(aPropertyChangeListener);
        }        
        aPropertyChangeListener = pListener;
        if (propertyTarget != null && aPropertyChangeListener != null)
        {
            propertyTarget.addPropertyChangeListener(aPropertyChangeListener);            
        }        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents ()
    {//GEN-BEGIN:initComponents
        
        setLayout (new java.awt.BorderLayout ());
        
    }//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
