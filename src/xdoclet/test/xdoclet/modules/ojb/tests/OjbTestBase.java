package xdoclet.modules.ojb.tests;

/* Copyright 2003-2005 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.HashMap;
import java.util.Iterator;

import xdoclet.junit.*;

/**
 * Base class for tests for the Xdoclet OJB module.
 *
 * @author <a href="mailto:tomdz@users.sourceforge.net">Thomas Dudziak (tomdz@users.sourceforge.net)</a>
 */
public class OjbTestBase extends XDocletTestBase
{
    protected static final String OJB_DEST_FILE                 = "repository_user.xml";
    protected static final String TORQUE_DEST_FILE              = "project_schema.xml";
    protected static final String PROPERTY_CHECKS               = "checks";
    protected static final String PROPERTY_DATABASENAME         = "databaseName";
    protected static final String PROPERTY_GENERATE_FOREIGNKEYS = "generateForeignkeys";

    public OjbTestBase(String name)
    {
        super(name);
    }

    protected String runOjbXDoclet(String destFile)
    {
        return runOjbXDoclet(destFile, null, null);
    }

    protected String runOjbXDoclet(String destFile, HashMap taskProps, HashMap subTaskProps)
    {
        clearTaskProperties();
        clearSubTaskProperties();
        setTaskName("xdoclet.modules.ojb.OjbDocletTask");
        setSubTaskName("xdoclet.modules.ojb.OjbSubTask");
        setProperties(taskProps, subTaskProps);
        setDestFile(destFile);

        return runXDoclet();
    }
    
    protected String runTorqueXDoclet(String destFile, String dbName)
    {
        HashMap props = new HashMap();

        props.put(PROPERTY_DATABASENAME, dbName);

        return runTorqueXDoclet(destFile, null, props);
    }

    protected String runTorqueXDoclet(String destFile, HashMap taskProps, HashMap subTaskProps)
    {
        clearTaskProperties();
        clearSubTaskProperties();
        setTaskName("xdoclet.modules.ojb.OjbDocletTask");
        setSubTaskName("xdoclet.modules.ojb.TorqueSubTask");
        setProperties(taskProps, subTaskProps);
        setDestFile(destFile);

        return runXDoclet();
    }
    
    private void setProperties(HashMap taskProps, HashMap subTaskProps)
    {
        String key;

        if (taskProps != null)
        {
            for (Iterator it = taskProps.keySet().iterator(); it.hasNext();)
            {
                key = (String)it.next();
                setTaskProperty(key, taskProps.get(key));
            }
        }
        if (subTaskProps != null)
        {
            for (Iterator it = subTaskProps.keySet().iterator(); it.hasNext();)
            {
                key = (String)it.next();
                setSubTaskProperty(key, subTaskProps.get(key));
            }
        }
    }
    
    /**
     * Helper method that compresses whitespaces, i.e. replaces all whitespaces with spaces and reduces
     * space blocks to single spaces.
     * 
     * @param text The input text
     * @return The text with whitespace compressed
     */
    protected String compressWhitespaces(String text)
    {
        if (text ==  null)
        {
            return null;
        }

        StringBuffer result = new StringBuffer();
        char         c;
        boolean      wasWS  = false;

        for (int idx = 0; idx < text.length(); idx++)
        {
            c = text.charAt(idx);
            if (!Character.isWhitespace(c))
            {
                if (wasWS && (result.length() > 0))
                {
                    result.append(' ');
                }
                result.append(c);
                wasWS = false;
            }
            else
            {
                wasWS = true;
            }
        }

        return result.toString();
    }

    protected void assertEqualsOjbDescriptorFile(String expected, String value)
    {
        assertEquals("<!-- file containing the repository descriptions for user-defined types --> "+
                     "<!-- Generated by the xdoclet-ojb module --> "+
                     compressWhitespaces(expected),
                     compressWhitespaces(value));
    }

    protected void assertEqualsTorqueSchemaFile(String expected, String value)
    {
        assertEquals("<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"no\" ?> "+
                     "<!DOCTYPE database SYSTEM \"http://jakarta.apache.org/turbine/dtd/database.dtd\"> "+
                     "<!-- Generated by the xdoclet-ojb module --> "+
                     compressWhitespaces(expected),
                     compressWhitespaces(value));
    }
}
